{"version":3,"sources":["scripts/formbaseview.min.js"],"names":["FormBaseView","Backbone","View","extend","template","remove","i","l","this","subViews","length","prototype","call","render","config","configAttributes","_","result","_i","_l","$el","html","model","toJSON","subviewAttributes","i1","l1","subviewAttribute","subviewSelector","$subviewSelector","$","subviewConfigs","Array","isArray","i2","l2","view","appendTo","push","initialize","options","domAttributes","attribute","domAttribute","attr"],"mappings":"AAAA,aAGA,IAAIA,aAAeC,SAASC,KAAKC,OAAO,CAUtCC,SAAU,aAIVC,OAAQ,WAGN,IAAK,IAAIC,EAAI,EAAGC,EAAIC,KAAKC,SAASC,OAAQJ,EAAIC,EAAGD,IAC/CE,KAAKC,SAASH,GAAGD,SAGnBJ,SAASC,KAAKS,UAAUN,OAAOO,KAAKJ,OAGtCK,OAAQ,WAGN,IAAK,IAAIP,EAAI,EAAGC,EAAIC,KAAKC,SAASC,OAAQJ,EAAIC,EAAGD,IAC/CE,KAAKC,SAASH,GAAGD,SAMnB,IAFA,IAAIS,EAAS,GACTC,EAAmBC,EAAEC,OAAOT,KAAM,mBAAoB,IACjDU,EAAK,EAAGC,EAAKJ,EAAiBL,OAAQQ,EAAKC,EAAID,IACtDJ,EAAOC,EAAiBG,IAAOV,KAAKO,EAAiBG,IAEvDV,KAAKY,IAAIC,KAAKb,KAAKJ,SAAS,CAC1BU,OAAQA,EACRQ,MAAOd,KAAKc,MAAMC,YAKpB,IADA,IAAIC,EAAoBR,EAAEC,OAAOT,KAAM,oBAAqB,IACnDiB,EAAK,EAAGC,EAAKF,EAAkBd,OAAQe,EAAKC,EAAID,IAAM,CAC7D,IAAIE,EAAmBX,EAAEC,OAAOO,EAAkBC,GAAK,aACnDG,EAAkBZ,EAAEC,OAAOO,EAAkBC,GAAK,YAClDI,EAAmBD,EAAkBE,EAAEF,EAAiBpB,KAAKY,KAAOZ,KAAKY,IAEzEW,EAAiBvB,KAAKmB,GAC1B,GAAII,EAAgB,CACbC,MAAMC,QAAQF,KACjBA,EAAiB,CAACA,IAGpB,IAAK,IAAIG,EAAK,EAAGC,EAAKJ,EAAerB,OAAQwB,EAAKC,EAAID,IAAM,CAC1D,IACIE,EAAO,KADKZ,EAAkBC,GAAIW,KAAKzB,qBAAqBV,SAASC,KAAOsB,EAAkBC,GAAIW,KAAOZ,EAAkBC,GAAIW,KAAKL,EAAeG,KAC7H/B,OAAO4B,EAAeG,IAArC,CAA2C,CACpDZ,MAAOd,KAAKc,QAEdc,EAAKhB,IAAIiB,SAASR,GAClBO,EAAKvB,SACLL,KAAKC,SAAS6B,KAAKF,OAQ3BG,WAAY,SAAoBC,GAC9BhC,KAAKC,SAAW,GAGhB,IADA,IAAIgC,EAAgBzB,EAAEC,OAAOT,KAAM,gBAAiB,IAC3CF,EAAI,EAAGC,EAAIkC,EAAc/B,OAAQJ,EAAIC,EAAGD,IAAK,CACpD,IAAIoC,EAAwC,iBAArBD,EAAcnC,GAAkBmC,EAAcnC,GAAKU,EAAEC,OAAOwB,EAAcnC,GAAI,aACjGqC,EAA2C,iBAArBF,EAAcnC,GAAkBmC,EAAcnC,GAAKU,EAAEC,OAAOwB,EAAcnC,GAAI,eAAgBoC,GAEpHA,GAAalC,KAAKkC,IAAcC,GAClCnC,KAAKY,IAAIwB,KAAKD,EAAcnC,KAAKkC","file":"formbaseview.min.js","sourcesContent":["'use strict';\n\n/* exported FormBaseView */\nvar FormBaseView = Backbone.View.extend({\n\n  // PROPERTY DEFINITION\n\n  // configAttributes?:function|[string],\n\n  // domAttributes?:function|[string|{ attribute:function|string, domAttribute?:function|string }]\n\n  // subviewAttributes?:function|[{ attribute:function|string, selector?:function|string, view:Backbone.View }],\n\n  template: function template() {},\n\n  // METHOD DEFINITION\n\n  remove: function remove() {\n\n    // REMOVE SUBVIEWS\n    for (var i = 0, l = this.subViews.length; i < l; i++) {\n      this.subViews[i].remove();\n    }\n\n    Backbone.View.prototype.remove.call(this);\n  },\n\n  render: function render() {\n\n    // REMOVE SUBVIEWS\n    for (var i = 0, l = this.subViews.length; i < l; i++) {\n      this.subViews[i].remove();\n    }\n\n    // RENDER FROM TEMPLATE\n    var config = {};\n    var configAttributes = _.result(this, 'configAttributes', []);\n    for (var _i = 0, _l = configAttributes.length; _i < _l; _i++) {\n      config[configAttributes[_i]] = this[configAttributes[_i]];\n    }\n    this.$el.html(this.template({\n      config: config,\n      model: this.model.toJSON()\n    }));\n\n    // ADD SUBVIEWS\n    var subviewAttributes = _.result(this, 'subviewAttributes', []);\n    for (var i1 = 0, l1 = subviewAttributes.length; i1 < l1; i1++) {\n      var subviewAttribute = _.result(subviewAttributes[i1], 'attribute');\n      var subviewSelector = _.result(subviewAttributes[i1], 'selector');\n      var $subviewSelector = subviewSelector ? $(subviewSelector, this.$el) : this.$el;\n\n      var subviewConfigs = this[subviewAttribute];\n      if (subviewConfigs) {\n        if (!Array.isArray(subviewConfigs)) {\n          subviewConfigs = [subviewConfigs];\n        }\n\n        for (var i2 = 0, l2 = subviewConfigs.length; i2 < l2; i2++) {\n          var ViewClass = subviewAttributes[i1].view.prototype instanceof Backbone.View ? subviewAttributes[i1].view : subviewAttributes[i1].view(subviewConfigs[i2]);\n          var view = new (ViewClass.extend(subviewConfigs[i2]))({\n            model: this.model\n          });\n          view.$el.appendTo($subviewSelector);\n          view.render();\n          this.subViews.push(view);\n        }\n      }\n    }\n  },\n\n  // INITIALIZER DEFINITION\n\n  initialize: function initialize(options) {\n    this.subViews = [];\n\n    var domAttributes = _.result(this, 'domAttributes', []);\n    for (var i = 0, l = domAttributes.length; i < l; i++) {\n      var attribute = typeof domAttributes[i] === 'string' ? domAttributes[i] : _.result(domAttributes[i], 'attribute');\n      var domAttribute = typeof domAttributes[i] === 'string' ? domAttributes[i] : _.result(domAttributes[i], 'domAttribute', attribute);\n\n      if (attribute && this[attribute] && domAttribute) {\n        this.$el.attr(domAttribute, this[attribute]);\n      }\n    }\n  }\n});"]}